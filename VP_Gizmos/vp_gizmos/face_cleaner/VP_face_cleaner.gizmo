Group {
 name VP_face_cleaner
 tile_color 0x3d97d0ff
 addUserKnob {20 User}
 addUserKnob {3 remove_abberations l "Remove Abberations:" t "Default: 4\nRecomended: from 2 to 6\nDon't remove: 0"}
 remove_abberations 4
 addUserKnob {26 ""}
 addUserKnob {7 details l Details: R 2 8}
 details 4
 addUserKnob {7 width_details l Width: R 2 12}
 width_details 8
 addUserKnob {7 height_details l Height: -STARTLINE R 2 12}
 height_details {{width_details}}
 addUserKnob {7 details_mix l Mix:}
 details_mix 1
 addUserKnob {14 FilterErode1_size l "Mask Erode:" R -100 100}
 addUserKnob {41 filter -STARTLINE T FilterErode1.filter}
 addUserKnob {26 ""}
 addUserKnob {7 high_frequency l "High Frequency:" R 0 40}
 high_frequency 10
 addUserKnob {7 low_frequency l Low: -STARTLINE R 0 40}
 low_frequency 20
 addUserKnob {7 frequency_mix l Mix:}
 frequency_mix 1
 addUserKnob {14 FilterErode2_size l "Mask Erode:" R -100 100}
 addUserKnob {41 filter_1 l filter -STARTLINE T FilterErode2.filter}
 addUserKnob {26 version l "" +STARTLINE T "<font color=#2083c4><i><font size=\"2\">VP Face Cleaner v1.0</>"}
}
 BackdropNode {
  inputs 0
  name BackdropNode1
  knobChanged "try:\n    listenedKnobs = \['text', 'position', 'name']\n    node = nuke.thisNode()\n    name = node.knob('name').value()\n    text = node.knob('text').value()\n    position = node.knob('position').value()\n    position = \"<\" + position + \">\"\n    label = node.knob('label').value()\n    \n    if nuke.thisKnob().name() in listenedKnobs:\n        if text == \"\":\n            if node.knob('position').value() == \"left\":\n                node.knob('label').setValue()\n            else:\n                node.knob('label').setValue(position + name)\n        else:\n            if node.knob('position').value() == \"left\":\n                node.knob('label').setValue(text)\n            else:\n                node.knob('label').setValue(position + text)\n                \n    elif nuke.thisKnob().name() == 'font_size':\n        fontSize = node.knob('font_size').value()\n        node.knob('note_font_size').setValue(fontSize)\nexcept:\n    pass"
  tile_color 0x28302aff
  label <Left>Details
  note_font Arial
  note_font_size 50
  xpos 292
  ypos -1210
  bdwidth 544
  bdheight 741
  addUserKnob {20 F_VFX l BackdropNode}
  addUserKnob {43 text l Text}
  text Details
  addUserKnob {7 font_size l "Font Size" R 10 100}
  font_size 50
  addUserKnob {4 position l "" -STARTLINE M {Left Center}}
  addUserKnob {26 S01 l " " T " "}
  addUserKnob {22 grow l " <img src=\"F_scalep.png\">" -STARTLINE T "n=nuke.thisNode()\n\ndef grow(node=None,step=50):\n    try:\n        if not node:\n            n=nuke.selectedNode()\n        else:\n            n=node\n            n\['xpos'].setValue(n\['xpos'].getValue()-step)\n            n\['ypos'].setValue(n\['ypos'].getValue()-step)\n            n\['bdwidth'].setValue(n\['bdwidth'].getValue()+step*2)\n            n\['bdheight'].setValue(n\['bdheight'].getValue()+step*2)\n    except:\n        pass\ngrow(n,50)"}
  addUserKnob {22 shrink l " <img src=\"F_scalem.png\">" -STARTLINE T "n=nuke.thisNode()\n\ndef shrink(node=None,step=50):\n    try:\n        if not node:\n            n=nuke.selectedNode()\n        else:\n            n=node\n            n\['xpos'].setValue(n\['xpos'].getValue()+step)\n            n\['ypos'].setValue(n\['ypos'].getValue()+step)\n            n\['bdwidth'].setValue(n\['bdwidth'].getValue()-step*2)\n            n\['bdheight'].setValue(n\['bdheight'].getValue()-step*2)\n    except:\n        pass\nshrink(n,50)"}
  addUserKnob {22 colorandom l " <img src=\"ColorBars.png\">" -STARTLINE T "import colorsys, random\nn=nuke.thisNode()\nR,G,B= colorsys.hsv_to_rgb(random.random(),.1+random.random()*.15,.15+random.random()*.15)\nR,G,B=int(R*255),int(G*255),int(B*255)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R,G,B,255), 16 ) )"}
  addUserKnob {22 red l " <img src=\"F_r.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.0, 0.77, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nR,G,B=int(R*255),int(G*255),int(B*255)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R,G,B,255), 16 ))\n"}
  addUserKnob {22 orange l " <img src=\"F_o.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.1, 0.8, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nR,G,B=int(R*255),int(G*255),int(B*255)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R,G,B,255), 16 ))\n"}
  addUserKnob {22 yellow l " <img src=\"F_y.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.16, 0.8, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nR,G,B=int(R*255),int(G*255),int(B*255)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R,G,B,255), 16 ))\n"}
  addUserKnob {22 green l " <img src=\"F_g.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.33, 0.8, 0.7]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nR,G,B=int(R*255),int(G*255),int(B*255)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R,G,B,255), 16 ))\n"}
  addUserKnob {22 cyan l " <img src=\"F_c.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.46, 0.8, 0.7]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nR,G,B=int(R*255),int(G*255),int(B*255)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R,G,B,255), 16 ))\n"}
  addUserKnob {22 blue l " <img src=\"F_b.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.6, 0.7, 0.76]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nR,G,B=int(R*255),int(G*255),int(B*255)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R,G,B,255), 16 ))\n"}
  addUserKnob {22 darkblue l " <img src=\"F_db.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.67, 0.74, 0.6]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nR,G,B=int(R*255),int(G*255),int(B*255)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R,G,B,255), 16 ))\n"}
  addUserKnob {22 magenta l " <img src=\"F_m.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.8, 0.74, 0.65]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nR,G,B=int(R*255),int(G*255),int(B*255)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R,G,B,255), 16 ))\n"}
  addUserKnob {22 pink l " <img src=\"F_p.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.92, 0.74, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nR,G,B=int(R*255),int(G*255),int(B*255)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R,G,B,255), 16 ))\n"}
  addUserKnob {26 S02 l " " T " "}
  addUserKnob {26 Ftools l "" +STARTLINE T "<font color=\"#1C1C1C\"> v1.2 - Franklin VFX - 2018"}
 }
 BackdropNode {
  inputs 0
  name BackdropNode2
  knobChanged "try:\n    listenedKnobs = \['text', 'position', 'name']\n    node = nuke.thisNode()\n    name = node.knob('name').value()\n    text = node.knob('text').value()\n    position = node.knob('position').value()\n    position = \"<\" + position + \">\"\n    label = node.knob('label').value()\n    \n    if nuke.thisKnob().name() in listenedKnobs:\n        if text == \"\":\n            if node.knob('position').value() == \"left\":\n                node.knob('label').setValue()\n            else:\n                node.knob('label').setValue(position + name)\n        else:\n            if node.knob('position').value() == \"left\":\n                node.knob('label').setValue(text)\n            else:\n                node.knob('label').setValue(position + text)\n                \n    elif nuke.thisKnob().name() == 'font_size':\n        fontSize = node.knob('font_size').value()\n        node.knob('note_font_size').setValue(fontSize)\nexcept:\n    pass"
  tile_color 0x4b4541ff
  label "<Left>Remove abberations"
  note_font Arial
  note_font_size 50
  xpos 88
  ypos -1589
  bdwidth 480
  bdheight 317
  addUserKnob {20 F_VFX l BackdropNode}
  addUserKnob {43 text l Text}
  text "Remove abberations"
  addUserKnob {7 font_size l "Font Size" R 10 100}
  font_size 50
  addUserKnob {4 position l "" -STARTLINE M {Left Center}}
  addUserKnob {26 S01 l " " T " "}
  addUserKnob {22 grow l " <img src=\"F_scalep.png\">" -STARTLINE T "n=nuke.thisNode()\n\ndef grow(node=None,step=50):\n    try:\n        if not node:\n            n=nuke.selectedNode()\n        else:\n            n=node\n            n\['xpos'].setValue(n\['xpos'].getValue()-step)\n            n\['ypos'].setValue(n\['ypos'].getValue()-step)\n            n\['bdwidth'].setValue(n\['bdwidth'].getValue()+step*2)\n            n\['bdheight'].setValue(n\['bdheight'].getValue()+step*2)\n    except:\n        pass\ngrow(n,50)"}
  addUserKnob {22 shrink l " <img src=\"F_scalem.png\">" -STARTLINE T "n=nuke.thisNode()\n\ndef shrink(node=None,step=50):\n    try:\n        if not node:\n            n=nuke.selectedNode()\n        else:\n            n=node\n            n\['xpos'].setValue(n\['xpos'].getValue()+step)\n            n\['ypos'].setValue(n\['ypos'].getValue()+step)\n            n\['bdwidth'].setValue(n\['bdwidth'].getValue()-step*2)\n            n\['bdheight'].setValue(n\['bdheight'].getValue()-step*2)\n    except:\n        pass\nshrink(n,50)"}
  addUserKnob {22 colorandom l " <img src=\"ColorBars.png\">" -STARTLINE T "import colorsys, random\nn=nuke.thisNode()\nR,G,B= colorsys.hsv_to_rgb(random.random(),.1+random.random()*.15,.15+random.random()*.15)\nR,G,B=int(R*255),int(G*255),int(B*255)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R,G,B,255), 16 ) )"}
  addUserKnob {22 red l " <img src=\"F_r.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.0, 0.77, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nR,G,B=int(R*255),int(G*255),int(B*255)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R,G,B,255), 16 ))\n"}
  addUserKnob {22 orange l " <img src=\"F_o.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.1, 0.8, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nR,G,B=int(R*255),int(G*255),int(B*255)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R,G,B,255), 16 ))\n"}
  addUserKnob {22 yellow l " <img src=\"F_y.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.16, 0.8, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nR,G,B=int(R*255),int(G*255),int(B*255)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R,G,B,255), 16 ))\n"}
  addUserKnob {22 green l " <img src=\"F_g.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.33, 0.8, 0.7]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nR,G,B=int(R*255),int(G*255),int(B*255)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R,G,B,255), 16 ))\n"}
  addUserKnob {22 cyan l " <img src=\"F_c.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.46, 0.8, 0.7]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nR,G,B=int(R*255),int(G*255),int(B*255)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R,G,B,255), 16 ))\n"}
  addUserKnob {22 blue l " <img src=\"F_b.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.6, 0.7, 0.76]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nR,G,B=int(R*255),int(G*255),int(B*255)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R,G,B,255), 16 ))\n"}
  addUserKnob {22 darkblue l " <img src=\"F_db.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.67, 0.74, 0.6]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nR,G,B=int(R*255),int(G*255),int(B*255)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R,G,B,255), 16 ))\n"}
  addUserKnob {22 magenta l " <img src=\"F_m.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.8, 0.74, 0.65]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nR,G,B=int(R*255),int(G*255),int(B*255)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R,G,B,255), 16 ))\n"}
  addUserKnob {22 pink l " <img src=\"F_p.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.92, 0.74, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nR,G,B=int(R*255),int(G*255),int(B*255)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R,G,B,255), 16 ))\n"}
  addUserKnob {26 S02 l " " T " "}
  addUserKnob {26 Ftools l "" +STARTLINE T "<font color=\"#1C1C1C\"> v1.2 - Franklin VFX - 2018"}
 }
 BackdropNode {
  inputs 0
  name BackdropNode31
  tile_color 0xaaaaaa00
  label "High frequency"
  note_font_size 42
  xpos 57
  ypos -396
  bdwidth 499
  bdheight 181
 }
 BackdropNode {
  inputs 0
  name BackdropNode32
  tile_color 0xaaaaaa00
  label "Low frequency"
  note_font_size 42
  xpos 56
  ypos -207
  bdwidth 501
  bdheight 185
 }
 Input {
  inputs 0
  name InputMask
  xpos 937
  ypos -1634
  number 1
 }
 Input {
  inputs 0
  name InputSrc
  xpos 118
  ypos -1719
 }
 Dot {
  name Dot1
  xpos 152
  ypos -1662
 }
set N3bb25c00 [stack 0]
 Expression {
  expr0 1
  expr1 1
  expr2 1
  expr3 1
  name ExpressionAlpha
  xpos 1071
  ypos -1665
 }
 Dissolve {
  inputs 2
  which {{"parent.inputs == 2"}}
  name CheckMaskInputExists
  xpos 999
  ypos -1564
 }
 Dot {
  name Dot318
  xpos 1033
  ypos -1323
 }
set N3fb00800 [stack 0]
 Dot {
  name Dot303
  xpos 1033
  ypos -923
 }
set N3fb00c00 [stack 0]
 Dot {
  name Dot304
  xpos 1033
  ypos -884
 }
set N3fb01000 [stack 0]
 Dot {
  name Dot305
  xpos 1033
  ypos -520
 }
set N3fb01400 [stack 0]
 Dot {
  name Dot306
  xpos 1033
  ypos -164
 }
 FilterErode {
  size {{parent.FilterErode2_size.w} {parent.FilterErode2_size.h}}
  filter gaussian
  name FilterErode2
  xpos 629
  ypos -173
 }
push $N3fb01400
 FilterErode {
  size {{parent.FilterErode1_size.w} {parent.FilterErode1_size.h}}
  filter gaussian
  name FilterErode1
  xpos 726
  ypos -529
 }
push $N3fb00800
push $N3bb25c00
 Dot {
  name Dot317
  xpos 152
  ypos -1460
 }
set N3fb26400 [stack 0]
 Colorspace {
  colorspace_out CIE-Lab
  name Colorspace31
  label "\[value colorspace_in] >> \[value colorspace_out]"
  xpos 262
  ypos -1469
 }
 Median {
  channels {-rgba.red rgba.green rgba.blue none}
  size {{parent.remove_abberations}}
  ignore_top_line false
  name Median57
  xpos 262
  ypos -1433
 }
 Colorspace {
  colorspace_in CIE-Lab
  name Colorspace32
  label "\[value colorspace_in] >> \[value colorspace_out]"
  xpos 262
  ypos -1409
 }
push $N3fb26400
 Dissolve {
  inputs 2+1
  which {{parent.remove_abberations}}
  name UseAbberations
  xpos 118
  ypos -1332
 }
 Dot {
  name Dot307
  xpos 152
  ypos -1090
 }
set N3fb27800 [stack 0]
 Dot {
  name Dot308
  xpos 353
  ypos -1090
 }
set N3fb27c00 [stack 0]
push $N3fb00c00
push $N3fb27c00
 Dot {
  name Dot309
  xpos 508
  ypos -1090
 }
set N3fb52000 [stack 0]
 Median {
  size {{parent.details}}
  ignore_top_line false
  name Median55
  xpos 474
  ypos -1046
 }
 Blur {
  size 2
  name Blur80
  label "\[value size]"
  xpos 474
  ypos -1001
 }
 CopyBBox {
  inputs 2
  name CopyBBox43
  xpos 474
  ypos -926
 }
set N3fb52c00 [stack 0]
 Merge2 {
  inputs 2
  operation divide
  name Merge119
  xpos 322
  ypos -838
 }
push $N3fb52c00
push $N3fb01000
push $N3fb52000
 Dot {
  name Dot310
  xpos 710
  ypos -1090
 }
 Median {
  size {{parent.width_details} {parent.height_details}}
  ignore_top_line false
  name Median56
  xpos 676
  ypos -1045
 }
 CopyBBox {
  inputs 2
  name CopyBBox44
  xpos 676
  ypos -887
 }
 Dot {
  name Dot311
  xpos 710
  ypos -802
 }
set N7688000 [stack 0]
 Merge2 {
  inputs 2
  operation divide
  name Merge120
  xpos 474
  ypos -805
 }
 Merge2 {
  inputs 2
  operation divide
  name Merge121
  xpos 322
  ypos -697
 }
 Dot {
  name Dot312
  xpos 356
  ypos -628
 }
push $N7688000
 Merge2 {
  inputs 2
  operation multiply
  name Merge122
  xpos 676
  ypos -631
 }
 Dot {
  name Dot313
  xpos 710
  ypos -554
 }
push $N3fb27800
 Dissolve {
  inputs 2+1
  which {{parent.details_mix}}
  name Dissolve49
  label "Which: \[value which]"
  xpos 118
  ypos -536
 }
 Dot {
  name Dot314
  xpos 152
  ypos -329
 }
set N7689c00 [stack 0]
 Dot {
  name Dot315
  xpos 258
  ypos -329
 }
set N76ae000 [stack 0]
 Blur {
  size {{parent.high_frequency}}
  name Blur81
  label "\[value size]"
  xpos 421
  ypos -345
 }
set N76ae400 [stack 0]
 Blur {
  inputs 1+1
  size {{parent.low_frequency}}
  name Blur82
  label "\[value size]"
  xpos 421
  ypos -180
 }
push $N76ae400
push $N76ae000
 Merge2 {
  inputs 2
  operation from
  name Merge123
  label "\[value Bchannels]"
  xpos 224
  ypos -272
 }
 Merge2 {
  inputs 2
  operation plus
  name Merge124
  xpos 224
  ypos -87
 }
push $N7689c00
 Dissolve {
  inputs 2
  which {{parent.frequency_mix}}
  name Dissolve50
  label "\[value which]"
  selected true
  xpos 118
  ypos -9
 }
 Output {
  name Output1
  xpos 118
  ypos 135
 }
end_group
